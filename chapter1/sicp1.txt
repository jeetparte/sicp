# SICP - Chapter 1

## 1.1
 
     *Exercise 1.1:* Below is a sequence of expressions.  What is the
     result printed by the interpreter in response to each expression?
     Assume that the sequence is to be evaluated in the order in which
     it is presented.

          10

          (+ 5 3 4)

          (- 9 1)

          (/ 6 2)

          (+ (* 2 4) (- 4 6))

          (define a 3)

          (define b (+ a 1))

          (+ a b (* a b))

          (= a b)

          (if (and (> b a) (< b (* a b)))
              b
              a)

          (cond ((= a 4) 6)
                ((= b 4) (+ 6 7 a))
                (else 25))

          (+ 2 (if (> b a) b a))

          (* (cond ((> a b) a)
                   ((< a b) b)
                   (else -1))
             (+ a 1))
### Racket

	Welcome to DrRacket, version 7.4 [3m].
	Language: sicp, with debugging; memory limit: 128 MB.
	> 10
	10
	> (+ 5 3 4)
	12
	> (- 9 1)
	8
	> (/ 6 2)
	3
	> (+ (* 2 4) (- 4 6))
	6
	> (define a 3)
	> (define b (+ a 1))
	> (+ a b (* a b))
	19
	> (= a b)
	#f
	> (if (and (> b a) (< b (* a b)))
	      b
	      a)
	4
	> (cond ((= a 4) 6)
	        ((= b 4) (+ 6 7 a))
	        (else 25))
	16
	> (+ 2 (if (> b a) b a))
	6
	> (* (cond ((> a b) a)
	           ((< a b) b)
	           (else -1))
	     (+ a 1))
	16

### Scheme

	Last login: Sat Aug 24 21:34:04 on ttys000
	pius:~ janaka$ guile
	GNU Guile 2.2.6
	Copyright (C) 1995-2019 Free Software Foundation, Inc.
	
	Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.
	This program is free software, and you are welcome to redistribute it
	under certain conditions; type `,show c' for details.
	
	Enter `,help' for help.

	scheme@(guile-user)> 10
	$1 = 10
	scheme@(guile-user)> (+ 5 3 4)
	$2 = 12
	scheme@(guile-user)> (- 9 1)
	$3 = 8
	scheme@(guile-user)> (/ 6 2)
	$4 = 3
	scheme@(guile-user)> (+ (* 2 4) (- 4 6))
	$5 = 6
	scheme@(guile-user)> (define a 3) 
	scheme@(guile-user)> (define b (+ a 1))
	scheme@(guile-user)> (+ a b (* a b))
	$6 = 19
	scheme@(guile-user)> (= a b)
	$7 = #f
	scheme@(guile-user)> (if (and (> b a) (< b (* a b)))         
				b        
				a)
	$8 = 4
	scheme@(guile-user)> (cond ((= a 4) 6)
				   ((= b 4) (+ 6 7 a))
				   (else 25))
	$9 = 16
	scheme@(guile-user)> (+ 2 (if (> b a) b a))
	$10 = 6
	scheme@(guile-user)> (* (cond ((> a b) a)
			              ((< a b) b)
				          (else -1))
				          (+ a 1))
	$11 = 16

## 1.2

     *Exercise 1.2:* Translate the following expression into prefix
     form.

          5 + 4 + (2 - (3 - (6 + 4/5)))
          -----------------------------
                 3(6 - 2)(2 - 7)

     *Exercise 1.3:* Define a procedure that takes three numbers as
     arguments and returns the sum of the squares of the two larger
     numbers.

     *Exercise 1.4:* Observe that our model of evaluation allows for
     combinations whose operators are compound expressions.  Use this
     observation to describe the behavior of the following procedure:

          (define (a-plus-abs-b a b)
            ((if (> b 0) + -) a b))

     *Exercise 1.5:* Ben Bitdiddle has invented a test to determine
     whether the interpreter he is faced with is using
     applicative-order evaluation or normal-order evaluation.  He
     defines the following two procedures:

          (define (p) (p))

          (define (test x y)
            (if (= x 0)
                0
                y))

     Then he evaluates the expression

          (test 0 (p))

     What behavior will Ben observe with an interpreter that uses
     applicative-order evaluation?  What behavior will he observe with
     an interpreter that uses normal-order evaluation?  Explain your
     answer.  (Assume that the evaluation rule for the special form
     `if' is the same whether the interpreter is using normal or
     applicative order: The predicate expression is evaluated first,
     and the result determines whether to evaluate the consequent or
     the alternative expression.)


